[{"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\About.js":"1","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Login.js":"2","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Forum.js":"3","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Thread.js":"4","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\ThreadPost.js":"5","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Signup.js":"6","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\index.js":"7","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\CreateThreadPost.js":"8","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\ThreadPostCard.js":"9","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Error.js":"10","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\App.js":"11","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\ForumThread.js":"12","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\UserInfo.js":"13","C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Home.js":"14"},{"size":2973,"mtime":1608174020364,"results":"15","hashOfConfig":"16"},{"size":5010,"mtime":1608174078800,"results":"17","hashOfConfig":"16"},{"size":2614,"mtime":1608174164844,"results":"18","hashOfConfig":"16"},{"size":3560,"mtime":1608174214367,"results":"19","hashOfConfig":"16"},{"size":7169,"mtime":1608174529445,"results":"20","hashOfConfig":"16"},{"size":8354,"mtime":1608174374615,"results":"21","hashOfConfig":"16"},{"size":759,"mtime":1608094251864,"results":"22","hashOfConfig":"16"},{"size":4277,"mtime":1608177692870,"results":"23","hashOfConfig":"16"},{"size":1028,"mtime":1608171815201,"results":"24","hashOfConfig":"16"},{"size":136,"mtime":1608171815144,"results":"25","hashOfConfig":"16"},{"size":3851,"mtime":1608173281140,"results":"26","hashOfConfig":"16"},{"size":748,"mtime":1608172898662,"results":"27","hashOfConfig":"16"},{"size":157,"mtime":1608171815111,"results":"28","hashOfConfig":"16"},{"size":2106,"mtime":1608176615056,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mbdwv4",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\About.js",[],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Login.js",["62"],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Forum.js",["63","64","65"],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Thread.js",["66","67","68"],"import React, {useEffect, useState} from \"react\";\r\nimport {Button, CardColumns, Col, Container, Jumbotron, Row} from \"react-bootstrap\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {UserInfo} from \"./UserInfo\";\r\nimport axios from \"axios\";\r\nimport ThreadPostCard from \"./ThreadPostCard\";\r\n\r\nfunction Thread(props) {\r\n    const userInfoState = UserInfo.useState()\r\n    const [posts, setPosts] = useState([])\r\n    const [apiErr, setApiErr] = useState(false)\r\n    const [apiErrMsg, setApiErrMsg] = useState('')\r\n    const [createPostRedirect, setCreatePostRedirect] = useState(false)\r\n\r\n    const handleAPIErrs = (error, message) => {\r\n        setApiErr(error)\r\n        setApiErrMsg(message)\r\n    }\r\n\r\n    const handlePostsSet = (apiResp) => {\r\n        setPosts(apiResp)\r\n    }\r\n\r\n    const handleCreatPostClick = () => {\r\n        setCreatePostRedirect(true)\r\n    }\r\n\r\n    const getPosts = () => {\r\n        axios.post('http://localhost:8080/query', {\r\n                query: `\r\n            query {\r\n                PostByThread(input:{\r\n                email:\"${userInfoState.userEmail}\"\r\n                token:\"${userInfoState.userToken}\"\r\n                threadID:\"${props.location.state.id}\"\r\n                }){\r\n                posts {\r\n                  id\r\n                  userId\r\n                  content\r\n                  commentIDs\r\n                  threadId\r\n                  subHeader\r\n                  title\r\n                  class\r\n                }\r\n                error {\r\n                  errors\r\n                  code\r\n                  message\r\n                }\r\n                }\r\n                }\r\n`\r\n            }\r\n        ).then((result) => {\r\n            if (!result.data.data.PostByThread.error.errors) {\r\n                handlePostsSet(result.data.data.PostByThread.posts)\r\n            } else {\r\n                handleAPIErrs(result.data.data.PostByThread.error.errors, result.data.data.PostByThread.error.message)\r\n            }\r\n        }).catch(error => {\r\n            handleAPIErrs(true, error)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPosts()\r\n    }, [])\r\n\r\n    if (createPostRedirect) {\r\n        const location = {\r\n            pathname: '/createThreadPost',\r\n            state: {threadId: props.location.state.id}\r\n        }\r\n        return (\r\n            <Redirect to={location}/>\r\n        )\r\n    }\r\n    return (\r\n        <div id=\"forumRoot\">\r\n            <Container>\r\n                <Row>\r\n                    <Col sm={12}>\r\n                        <Jumbotron>\r\n                            <h1>{props.location.state.name} threads!</h1>\r\n                            <h4>{props.location.state.tagline}</h4>\r\n                            <p>\r\n                                <Button variant=\"primary\" onClick={handleCreatPostClick}>Create Post</Button>\r\n                            </p>\r\n                        </Jumbotron>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            <Container>\r\n                <Row>\r\n                    <Col sm={12}>\r\n                        <CardColumns>\r\n                            {posts && posts.map((post) => (\r\n                                <ThreadPostCard key={post.id} title={post.title} subheader={post.subHeader} id={post.id}\r\n                                                threadId={props.location.state.id}/>\r\n                            ))}\r\n                        </CardColumns>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thread;",["69","70"],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\ThreadPost.js",["71","72","73"],"import React, {useEffect, useState} from 'react';\r\nimport {Button, Card, Col, Container, Form, Row, Spinner} from \"react-bootstrap\";\r\nimport axios from 'axios';\r\nimport {UserInfo} from \"./UserInfo\";\r\n\r\nfunction ThreadPost(props) {\r\n    const userInfoState = UserInfo.useState()\r\n    const [post, setPost] = useState()\r\n    const [comments, setComments] = useState([])\r\n    const [apiErr, setApiErr] = useState(false)\r\n    const [apiErrMsg, setApiErrMsg] = useState('')\r\n    const [postLoaded, setLoadedPost] = useState(false)\r\n    const [commentsLoaded, setCommentsLoaded] = useState(false)\r\n    const [commentContent, setCommentContent] = useState('')\r\n    const [commentCreatedNeedUpdate, setCommentCreatedNeedUpdate] = useState(false)\r\n\r\n    const handleAPIErrs = (error, message) => {\r\n        setApiErr(error)\r\n        setApiErrMsg(message)\r\n    }\r\n\r\n    const handlePostSet = (apiResp) => {\r\n        setPost(apiResp)\r\n    }\r\n\r\n    const handleCommentsSet = (apiResp) => {\r\n        setComments(apiResp)\r\n    }\r\n\r\n    const handlePostLoaded = () => {\r\n        setLoadedPost(true)\r\n    }\r\n\r\n    const handleCommentsLoaded = () => {\r\n        setCommentsLoaded(true)\r\n    }\r\n\r\n    const handleCommentContent = (e) => {\r\n        e.preventDefault()\r\n        setCommentContent(e.target.value)\r\n    }\r\n\r\n    const handleCommentCreation = () => {\r\n        setCommentCreatedNeedUpdate(true)\r\n    }\r\n\r\n    const getPost = () => {\r\n        axios.post('http://localhost:8080/query', {\r\n                query: `\r\n            query {\r\n              Post(input: {\r\n                email:\"${userInfoState.userEmail}\"\r\n                token:\"${userInfoState.userToken}\"\r\n                postId:\"${props.location.state.postId}\"\r\n              })\r\n              {\r\n                id\r\n                userId\r\n                content\r\n                commentIDs\r\n                threadId\r\n                subHeader\r\n                title\r\n                class\r\n                error {\r\n                  errors\r\n                  code\r\n                  message\r\n                }\r\n              }\r\n            }\r\n`\r\n            }\r\n        ).then((result) => {\r\n            if (!result.data.data.Post.error.errors) {\r\n                handlePostSet(result.data.data.Post)\r\n                handlePostLoaded()\r\n            } else {\r\n                handleAPIErrs(result.data.data.Post.error.errors, result.data.data.Post.error.message)\r\n            }\r\n        }).catch(error => {\r\n            handleAPIErrs(true, error)\r\n        })\r\n    }\r\n    const getComment = () => {\r\n        axios.post('http://localhost:8080/query', {\r\n                query: `\r\n          query {\r\n              CommentsByPostID(input:{\r\n                postID:\"${props.location.state.postId}\"\r\n                token:\"${userInfoState.userToken}\"\r\n                email:\"${userInfoState.userEmail}\"\r\n              }){\r\n                comments {\r\n                  id\r\n                  userId\r\n                  postId\r\n                  threadId\r\n                  content\r\n                }\r\n                error {\r\n                  errors\r\n                  code\r\n                  message\r\n                }\r\n              }\r\n            }\r\n`\r\n            }\r\n        ).then((result) => {\r\n            if (!result.data.data.CommentsByPostID.error.errors) {\r\n                handleCommentsSet(result.data.data.CommentsByPostID.comments)\r\n                handleCommentsLoaded()\r\n            } else {\r\n                handleAPIErrs(result.data.data.CommentsByPostID.error.errors, result.data.data.CommentsByPostID.error.message)\r\n            }\r\n        }).catch(error => {\r\n            handleAPIErrs(true, error)\r\n        })\r\n    }\r\n\r\n    const postComment = () => {\r\n        axios.post('http://localhost:8080/query', {\r\n                query: `\r\n          mutation {\r\n              CreateComment(input:{\r\n                content:\"${commentContent}\"\r\n                threadId: \"${props.location.state.threadId}\"\r\n                postId:\"${props.location.state.postId}\"\r\n                token:\"${userInfoState.userToken}\"\r\n              })\r\n              {\r\n                id\r\n                error{\r\n                  errors\r\n                  code\r\n                  message\r\n                }\r\n              }\r\n            }\r\n`\r\n            }\r\n        ).then((result) => {\r\n            if (!result.data.data.CreateComment.error.errors) {\r\n                handleCommentCreation()\r\n            } else {\r\n                handleAPIErrs(result.data.data.CreateComment.error.errors, result.data.data.CreateComment.error.message)\r\n            }\r\n        }).catch(error => {\r\n            handleAPIErrs(true, error)\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPost()\r\n        getComment()\r\n    }, [])\r\n\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        postComment()\r\n    }\r\n\r\n    if (commentCreatedNeedUpdate) {\r\n        getPost()\r\n        getComment()\r\n        setCommentContent('')\r\n        setCommentCreatedNeedUpdate(false)\r\n    }\r\n\r\n    if (postLoaded) {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Col sm={12}>\r\n                        <Card>\r\n                            <Card.Header as=\"h4\">{post.title}</Card.Header>\r\n                            <Card.Body>\r\n                                <Card.Title>{post.subHeader}</Card.Title>\r\n                                <Card.Text>\r\n\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <br/>\r\n                        <Form>\r\n                            <h4>Post Comment</h4>\r\n                            <Form.Group>\r\n                                <Form.Label as={\"h5\"}>Comment</Form.Label>\r\n                                <Form.Control as='textarea' placeholder='Hehe haha funny!'\r\n                                              onChange={handleCommentContent} value={commentContent}/>\r\n                            </Form.Group>\r\n                            <Button onClick={handleClick} type='submit'>Post</Button>\r\n                        </Form>\r\n                        <br/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <h4>Comments</h4>\r\n                        {!commentsLoaded && (\r\n                            <Spinner animation=\"grow\" variant=\"info\"/>\r\n                        )}\r\n                        {comments && comments.map((comment) => (\r\n                            <Card key={comment.id}>\r\n                                <Card.Body>{comment.content}</Card.Body>\r\n                            </Card>\r\n                        ))}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    } else if (!postLoaded) {\r\n        return (\r\n            <Container>\r\n                <Row>\r\n                    <Spinner animation=\"border\" variant=\"info\"/>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ThreadPost;",["74","75"],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Signup.js",["76","77","78","79"],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\index.js",[],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\CreateThreadPost.js",["80","81"],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\ThreadPostCard.js",[],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Error.js",[],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\App.js",["82","83","84","85"],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\ForumThread.js",[],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\UserInfo.js",[],"C:\\Users\\sulli\\Documents\\CS 268\\cs-268-project2-code\\src\\components\\Home.js",[],{"ruleId":"86","severity":1,"message":"87","line":10,"column":12,"nodeType":"88","messageId":"89","endLine":10,"endColumn":19},{"ruleId":"86","severity":1,"message":"90","line":12,"column":12,"nodeType":"88","messageId":"89","endLine":12,"endColumn":18},{"ruleId":"86","severity":1,"message":"91","line":13,"column":12,"nodeType":"88","messageId":"89","endLine":13,"endColumn":21},{"ruleId":"92","severity":1,"message":"93","line":63,"column":8,"nodeType":"94","endLine":63,"endColumn":10,"suggestions":"95"},{"ruleId":"86","severity":1,"message":"90","line":11,"column":12,"nodeType":"88","messageId":"89","endLine":11,"endColumn":18},{"ruleId":"86","severity":1,"message":"91","line":12,"column":12,"nodeType":"88","messageId":"89","endLine":12,"endColumn":21},{"ruleId":"92","severity":1,"message":"96","line":69,"column":8,"nodeType":"94","endLine":69,"endColumn":10,"suggestions":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"86","severity":1,"message":"90","line":10,"column":12,"nodeType":"88","messageId":"89","endLine":10,"endColumn":18},{"ruleId":"86","severity":1,"message":"91","line":11,"column":12,"nodeType":"88","messageId":"89","endLine":11,"endColumn":21},{"ruleId":"92","severity":1,"message":"102","line":157,"column":8,"nodeType":"94","endLine":157,"endColumn":10,"suggestions":"103"},{"ruleId":"98","replacedBy":"104"},{"ruleId":"100","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":9,"column":1,"nodeType":"108","messageId":"109","endLine":10,"endColumn":2},{"ruleId":"86","severity":1,"message":"87","line":14,"column":12,"nodeType":"88","messageId":"89","endLine":14,"endColumn":19},{"ruleId":"86","severity":1,"message":"110","line":17,"column":12,"nodeType":"88","messageId":"89","endLine":17,"endColumn":25},{"ruleId":"86","severity":1,"message":"111","line":43,"column":11,"nodeType":"88","messageId":"89","endLine":43,"endColumn":39},{"ruleId":"86","severity":1,"message":"90","line":14,"column":12,"nodeType":"88","messageId":"89","endLine":14,"endColumn":18},{"ruleId":"86","severity":1,"message":"91","line":15,"column":12,"nodeType":"88","messageId":"89","endLine":15,"endColumn":21},{"ruleId":"86","severity":1,"message":"112","line":15,"column":9,"nodeType":"88","messageId":"89","endLine":15,"endColumn":22},{"ruleId":"86","severity":1,"message":"113","line":22,"column":25,"nodeType":"88","messageId":"89","endLine":22,"endColumn":34},{"ruleId":"86","severity":1,"message":"114","line":23,"column":15,"nodeType":"88","messageId":"89","endLine":23,"endColumn":28},{"ruleId":"92","severity":1,"message":"115","line":72,"column":12,"nodeType":"94","endLine":72,"endColumn":14,"suggestions":"116"},"no-unused-vars","'cookies' is assigned a value but never used.","Identifier","unusedVar","'apiErr' is assigned a value but never used.","'apiErrMsg' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getThreads'. Either include it or remove the dependency array.","ArrayExpression",["117"],"React Hook useEffect has a missing dependency: 'getPosts'. Either include it or remove the dependency array.",["118"],"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"React Hook useEffect has missing dependencies: 'getComment' and 'getPost'. Either include them or remove the dependency array.",["121"],["119"],["120"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'willingToHelp' is assigned a value but never used.","'handleWillingToHelpSelection' is assigned a value but never used.","'useStoreState' is defined but never used.","'setCookie' is assigned a value but never used.","'userInfoState' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loginWithCookie'. Either include it or remove the dependency array.",["122"],{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"no-global-assign","no-unsafe-negation",{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [getThreads]",{"range":"131","text":"132"},"Update the dependencies array to be: [getPosts]",{"range":"133","text":"134"},"Update the dependencies array to be: [getComment, getPost]",{"range":"135","text":"136"},"Update the dependencies array to be: [loginWithCookie]",{"range":"137","text":"138"},[1919,1921],"[getThreads]",[2113,2115],"[getPosts]",[4759,4761],"[getComment, getPost]",[2725,2727],"[loginWithCookie]"]